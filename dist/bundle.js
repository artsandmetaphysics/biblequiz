!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="/dist/",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);r(1);function n(e){return function(e){if(Array.isArray(e)){for(var t=0,r=new Array(e.length);t<e.length;t++)r[t]=e[t];return r}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e){return(i=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function l(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,o=!1,c=void 0;try{for(var a,i=e[Symbol.iterator]();!(n=(a=i.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,c=e}finally{try{n||null==i.return||i.return()}finally{if(o)throw c}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var f=["Genesis","Exodus","Leviticus","Numbers","Deuteronomy"],m=[50,40,27,36,34];function h(){var e=b(PENTATEUCH.length),t=PENTATEUCH[e].chapters,r=b(t.length);return[e+1,r+1,b(t[r].verses.length)+1]}function p(e){var t,r,n;if(3===e.length){var o=s(e,3);return t=o[0],r=o[1],n=o[2],y(t)+" "+r+"."+n}if(2===e.length){var c=s(e,2);return t=c[0],r=c[1],y(t)+" "+r}}function y(e){return f[e-1]}function b(e){return Math.floor(Math.random()*Math.floor(e))}function v(e,t,r){var n=0,o=s(r,3),c=o[0],a=o[1];o[2];if(e===c){n+=10;var i=Math.abs(t-a);0===i?n+=90:i<=5&&(n+=60-10*i)}return n}function d(e){var t=s(e,3),r=t[0],n=t[1],o=t[2],c=PENTATEUCH[r-1].chapters[n-1].verses[o-1];return void 0===c?null:c[String(o)]}var E=function(e){function t(e){var r,n,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),n=this,(r=!(c=i(t).call(this,e))||"object"!==o(c)&&"function"!=typeof c?l(n):c).state={score:0,questionNum:0,verse:h(),bookChoice:null,chapterChoice:null,history:S(),showHistory:!1},r.pickBook=r.pickBook.bind(l(r)),r.undoBookChoice=r.undoBookChoice.bind(l(r)),r.pickChapter=r.pickChapter.bind(l(r)),r.nextQuestion=r.nextQuestion.bind(l(r)),r.nextQuiz=r.nextQuiz.bind(l(r)),r}var r,n,s;return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&u(e,t)}(t,React.Component),r=t,(n=[{key:"pickBook",value:function(e){this.setState({bookChoice:e})}},{key:"undoBookChoice",value:function(){this.setState({bookChoice:null})}},{key:"pickChapter",value:function(e){this.setState(function(t){var r=v(t.bookChoice,e,t.verse);return{chapterChoice:e,questionNum:t.questionNum+1,score:t.score+r}})}},{key:"nextQuestion",value:function(){this.setState(function(e){var t=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},n=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),n.forEach(function(t){c(e,t,r[t])})}return e}({},e,{verse:h(),bookChoice:null,chapterChoice:null});if(10===e.questionNum){var r=function(e){var t=(new Date).toLocaleString(),r=S(),n={dateTimeString:t,score:e};return r.push(n),o="history",c=r,localStorage.setItem(o,JSON.stringify(c)),n;var o,c}(e.score);t.history.push(r),t.score=0,t.questionNum=0,t.showHistory=!0}return t})}},{key:"nextQuiz",value:function(){this.setState({showHistory:!1})}},{key:"render",value:function(){var e,t,r=this.state,n=r.score,o=r.questionNum,c=r.verse,a=r.bookChoice,i=r.chapterChoice,l=r.showHistory,u=r.history;return l?e=this.nextQuiz:null===a?(e=this.pickBook,t=!1):null===i?(e=this.pickChapter,t=!1):(e=this.nextQuestion,t=!0),React.createElement("div",{className:"app"},React.createElement(R,{score:n,questionNum:o,questionsPerQuiz:10}),l?React.createElement(C,{history:u}):React.createElement(k,{showAnswer:t,verse:c,bookChoice:a,chapterChoice:i}),React.createElement(w,{bookChoice:a,chapterChoice:i,onClick:e,goBack:this.undoBookChoice,showHistory:l}))}}])&&a(r.prototype,n),s&&a(r,s),t}();function R(e){var t=e.score,r=e.questionNum,n=e.questionsPerQuiz;return React.createElement("div",{className:"header"},React.createElement("h2",null,"Pentateuch Quiz"),React.createElement("h2",{className:"glow"},"SCORE: ",t),React.createElement("h2",{className:"glow"},r,"/",n))}function k(e){var t=e.showAnswer,r=e.verse,n=e.bookChoice,o=e.chapterChoice;if(t){var c,a=p([n,o]),i=v(n,o,r);return c=r[0]===n&&r[1]===o?React.createElement("p",{className:"body__correct"},"CORRECT!",React.createElement("br",null),"+",i," points!"):r[0]===n?React.createElement("p",{className:"body__close"},"Close, you chose ",a,".",React.createElement("br",null),"+",i," points"):React.createElement("p",{className:"body__wrong"},"Wrong, you chose ",a),React.createElement("div",{className:"body"},React.createElement("h2",null,p(r)),React.createElement(g,{verseArray:r}),c)}return React.createElement("div",{className:"body"},React.createElement(g,{verseArray:r}))}function C(e){var t=n(e.history).sort(function(e){return-e.score}).filter(function(e){return e.score>0}).slice(0,10);return React.createElement("div",{className:"body"},React.createElement("table",null,React.createElement("thead",null,React.createElement("tr",null,React.createElement("th",null),React.createElement("th",null,"Score"),React.createElement("th",null,"Date"))),React.createElement("tbody",null,t.map(function(e,t){return React.createElement("tr",{key:t},React.createElement("td",null,t+1),React.createElement("td",null,e.score),React.createElement("td",null,e.dateTimeString))}))))}function g(e){var t=e.verseArray,r=function(e){var t=s(e,3),r=t[0],n=t[1],o=t[2];return 1===o?null:d([r,n,o-1])}(t),n=d(t),o=function(e){var t=s(e,3),r=t[0],n=t[1],o=t[2];return d([r,n,o+1])||null}(t);return React.createElement("p",null,r?React.createElement("span",{className:"body__context"},r+" "):null,React.createElement("span",null,n),o?React.createElement("span",{className:"body__context"}," "+o):null)}var N=["#EC6B34","#3C64DC","#55AEEE","#AE9BFB","#F59A2F"];function w(e){var t=e.bookChoice,r=e.chapterChoice,n=e.onClick,o=e.goBack;if(e.showHistory)return React.createElement("div",{className:"footer"},React.createElement(O,{color:"#5D4DC3",onClick:n},"Start New Quiz"));if(null===t)return React.createElement("div",{className:"footer"},React.createElement("p",{className:"footer__help"},"Which book is this verse from?"),React.createElement(O,{color:N[0],onClick:function(){return n(1)}},"Genesis"),React.createElement(O,{color:N[1],onClick:function(){return n(2)}},"Exodus"),React.createElement(O,{color:N[2],onClick:function(){return n(3)}},"Leviticus"),React.createElement(O,{color:N[3],onClick:function(){return n(4)}},"Numbers"),React.createElement(O,{color:N[4],onClick:function(){return n(5)}},"Deut."));if(null===r){var c=m[t-1],a=Array.apply(null,{length:c}).map(Number.call,Number),i=N[t-1];return React.createElement("div",{className:"footer"},React.createElement("p",{className:"footer__help"},"And which chapter?"),a.map(function(e){return React.createElement(O,{color:i,key:e,onClick:function(){return n(e+1)}},e+1)}),React.createElement(O,{color:"#999",onClick:o},"Back"))}return React.createElement("div",{className:"footer"},React.createElement(O,{color:"#5D4DC3",onClick:n},"Next Question"))}function O(e){var t=e.children,r=e.onClick,n=e.color;return React.createElement("div",{style:{backgroundColor:n},className:"button",onClick:r},t)}function S(){var e=function(e,t){try{return JSON.parse(localStorage.getItem("history"))}catch(e){return null}}();return null===e&&(e=[]),e}ReactDOM.render(React.createElement(E,{name:"Taylor"}),document.getElementById("app"))},function(e,t,r){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
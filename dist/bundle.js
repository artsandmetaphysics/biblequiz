!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/dist/",n(n.s=1)}([function(e,t,n){},function(e,t,n){"use strict";n.r(t);var r=window.gtag||function(){},a=function(e,t){void 0===t&&(t=e,e=0);for(var n=[],r=e;r<t;r++)n.push(r);return n},c=function(e){return e.replace(/\t/g,"    ").replace(/\u2019[ ]\u201D/g,"’”").replace(/\u201C[ ]\u2018/g,"“‘")},o=1,s=4e3,i=100,l=function(e,t,n,a,c){return function(o,s){if("SELECT_QUIZ"===s.type)null!==o.quiz&&null===s.quiz&&(o.currentAnswer=null,o.currentQuestion=null),o.quiz=s.quiz,null===o.currentQuestion&&null!==o.quiz&&(o.currentQuestion=a(o.quiz,o.historicalQAs)),r("event","quiz-start",{event_category:o.quiz,value:1}),o.quizQAs=[];else if("SELECT_MODE"===s.type){if(null!==o.quiz)throw new Error("mode change during quiz");o.mode=s.mode}else if("ANSWER"===s.type){if(r("event","quiz-answer",{event_category:o.quiz,value:1}),null!==o.currentAnswer)throw new Error("there is an answer already");o.currentAnswer=s.answer;var i=[o.currentQuestion,o.currentAnswer];if(o.quizQAs.push(i),o.historicalQAs.length<t?o.historicalQAs.push(i):(o.historicalQAs[o.historicalQAsIndex]=i,o.historicalQAsIndex=(o.historicalQAsIndex+1)%t),n(o.mode,o.quizQAs)){var l=[c(o.mode,o.quizQAs),(new Date).toLocaleString()];o.gameHistory=function(e,t,n,r,a){e.latest=r,void 0===e[t][n]&&(e[t][n]=[]);e[t][n].push(r),e[t][n].sort(function(e,t){return t[0]-e[0]}),e[t][n].length>a&&e[t][n].pop();return e}(o.gameHistory,o.mode,o.quiz,l,e),r("event","quiz-finish",{event_category:o.quiz,value:5})}}else"NEXT"===s.type&&(o.currentAnswer=null,n(o.mode,o.quizQAs)?o.currentQuestion=null:o.currentQuestion=a(o.quiz,o.historicalQAs));return o}};function u(){var e;try{(e=function(e,t){try{return JSON.parse(localStorage.getItem(e))}catch(e){return null}}("state")).version!==o&&(e=function(e){throw new Error("not implemented")}())}catch(t){e={version:o,quiz:null,mode:"basic",quizQAs:[],currentQuestion:null,currentAnswer:null,gameHistory:{basic:{},moses:{},jesus:{}},historicalQAs:[],historicalQAsIndex:0}}return e}function m(e){var t,n;t="state",n=e,localStorage.setItem(t,JSON.stringify(n))}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,a=!1,c=void 0;try{for(var o,s=e[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,c=e}finally{try{r||null==s.return||s.return()}finally{if(a)throw c}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var h=function(e,t){return 10===t.length},f=function(e,t){return t.reduce(function(t,n){return t+d(e,n)},0)},d=function(e,t){var n=0,r=p(t,2),a=r[0],c=r[1],o=p(a,3),s=o[0],i=o[1],l=o[2],u=p(c,3),m=u[0],h=u[1],f=u[2];if(s===m&&(n+=10,void 0!==h)){var d=Math.abs(h-i);if(0===d){if(n+=90,void 0!==f){var v=Math.abs(f-l);0===v?n+=900:v<=5&&(n+=600-100*v)}}else d<=5&&(n+=60-10*d)}return n},v=function(e,t){var n=d(e,t);return"basic"===e?10===n?"correct":"incorrect":"moses"===e?100===n?"correct":n>0?"close":"incorrect":"jesus"===e?1e3===n?"correct":n>0?"close":"incorrect":void 0},y={pentateuch:{label:"Pentateuch",books:a(5)},historical:{label:"Historical",books:a(5,17)},poetryandwisdom:{label:"Poetic & Wisdom",books:a(17,22)},prophecy:{label:"Prophecy",books:a(22,39)},oldtestament:{label:"Old Testament",books:a(0,39)},gospels:{label:"Gospels",books:a(39,43)},epistlesetc:{label:"Epistles Etc.",books:a(43,66)},newtestament:{label:"New Testament",books:a(39,66)}},E=function(e){return y[e].label},b=function(e){return y[e].books},R={basic:{pentateuch:[],historical:[],poetryandwisdom:[],prophecy:[],oldtestament:[["basic","pentateuch"],["basic","historical"],["basic","poetryandwisdom"],["basic","prophecy"]],gospels:[],epistlesetc:[],newtestament:[["basic","gospels"],["basic","epistlesetc"]]},moses:{pentateuch:[["basic","pentateuch"]],historical:[["basic","historical"]],poetryandwisdom:[["basic","poetryandwisdom"]],prophecy:[["basic","prophecy"]],oldtestament:[["basic","oldtestament"],["moses","pentateuch"],["moses","historical"],["moses","poetryandwisdom"],["moses","prophecy"]],gospels:[["basic","gospels"]],epistlesetc:[["basic","epistlesetc"]],newtestament:[["basic","newtestament"],["moses","gospels"],["moses","epistlesetc"]]},jesus:{pentateuch:[["moses","pentateuch"]],historical:[["moses","historical"]],poetryandwisdom:[["moses","poetryandwisdom"]],prophecy:[["moses","prophecy"]],oldtestament:[["moses","oldtestament"],["jesus","pentateuch"],["jesus","historical"],["jesus","poetryandwisdom"],["jesus","prophecy"]],gospels:[["moses","gospels"]],epistlesetc:[["moses","epistlesetc"]],newtestament:[["moses","newtestament"],["jesus","gospels"],["jesus","epistlesetc"]]}},g={basic:90,moses:900,jesus:9e3},w=function(e,t,n){var r=q(t,n);return z(e,r)},q=function e(t,n){var r=[];R[t][n].forEach(function(t){var n=p(t,2),a=n[0],c=n[1],o=R[a][c];(r.push([a,c]),o.length>0)&&e(a,c).forEach(function(e){return r.push(e)})});var a=[];return r.forEach(function(e){var t=!1;a.forEach(function(n){n[0]===e[0]&&n[1]===e[1]&&(t=!0)}),t||a.push(e)}),a},z=function(e,t){var n=t.map(function(t){var n=p(t,2),r=n[0],a=n[1];return A(e,r,a)});return[n.reduce(function(e,t){return t?e+1:e},0),n.length]},A=function(e,t,n){var r=e[t][n],a=g[t];return void 0!==r&&r[0][0]>=a};function N(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,a=!1,c=void 0;try{for(var o,s=e[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,c=e}finally{try{r||null==s.return||s.return()}finally{if(a)throw c}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function _(e,t){var n=e.map(k),r=e[function(e){var t=x(e.reduce(function(e,t){return e+t})),n=0,r=e[n];for(;t>=r;)r+=e[n+=1];return n}(n)],a=BOOK_META[r].chapters,c=x(a.length),o=x(a[c]),s=[r,c,o];return 41===r&&16===c&&35===o?_(e,t):43===r&&7===c&&36===o?_(e,t):43===r&&14===c&&33===o?_(e,t):43===r&&23===c&&6===o?_(e,t):s}function k(e){return BOOK_META[e].chapters.length}function C(e,t){return BOOK_META[e].chapters[t]}function S(e){var t=N(e,3),n=t[0],r=t[1],a=t[2];return void 0!==a?T(n)+" "+(r+1)+"."+(a+1):void 0!==r?T(n)+" "+(r+1):T(n)}function T(e){return BOOK_META[e].label}function x(e){return Math.floor(Math.random()*Math.floor(e))}function O(e,t){var n=N(e,3),r=n[0],a=n[1],c=n[2],o=BIBLE[r][a][c];if(void 0===o)throw new Error("invalid verse "+e);return t&&0===c?"\n"===o[0]?"\n\nCHAPTER ".concat(a+1,"\n")+o:"\n\nCHAPTER ".concat(a+1,"\n\n")+o:o}function j(e){var t=N(e,3),n=t[0],r=t[1],a=t[2];if(0===r&&0===a)return null;if(0===a){var c=r-1;return[n,c,C(n,c)-1]}return[n,r,a-1]}function Q(e){var t=N(e,3),n=t[0],r=t[1],a=t[2],c=a+1===C(n,r);return r+1===k(n)&&c?null:c?[n,r+1,0]:[n,r,a+1]}n(0);function M(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],r=!0,a=!1,c=void 0;try{for(var o,s=e[Symbol.iterator]();!(r=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);r=!0);}catch(e){a=!0,c=e}finally{try{r||null==s.return||s.return()}finally{if(a)throw c}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function H(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function P(e){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function I(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function B(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function D(e,t,n){return t&&B(e.prototype,t),n&&B(e,n),e}function L(e,t){return!t||"object"!==P(t)&&"function"!=typeof t?V(e):t}function V(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function U(e){return(U=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function W(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Z(e,t)}function Z(e,t){return(Z=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}var K=function(e){function t(e){var n;return I(this,t),(n=L(this,U(t).call(this,e))).state={error:!1},n}return W(t,React.Component),D(t,[{key:"componentDidCatch",value:function(e,t){console.error(e,t),r("event","error",{event_category:e.toString()})}},{key:"render",value:function(){return this.state.error?React.createElement("div",{className:"app"},React.createElement(G,null),React.createElement(pe,null),React.createElement(te,null)):React.createElement(F,null)}}],[{key:"getDerivedStateFromError",value:function(e){return{error:!0}}}]),t}(),F=function(e){function t(e){var n;I(this,t);return(n=L(this,U(t).call(this,e))).reducer=l(i,s,h,function(e,t){return _(b(e),t)},f),n.state=u(),n.dispatch=n.dispatch.bind(V(n)),n}return W(t,React.Component),D(t,[{key:"dispatch",value:function(e){var t=this;this.setState(function(n){var r=t.reducer(n,e);return setTimeout(function(){return m(r)},0),r})}},{key:"render",value:function(){var e,t,n,r,a,c,o=(e=this.state,t=h,null===e.quiz?"home":null!==e.currentAnswer?"review":t(e.mode,e.quizQAs)?"score":"prompt"),s=this.state,i=s.gameHistory,l=s.mode,u=s.quiz;if("home"===o)n=React.createElement(G,null),r=null,a=React.createElement(he,{gameHistory:i,mode:l,dispatch:this.dispatch}),c=React.createElement(te,null);else{var m=this.state.currentQuestion,p=this.state.currentAnswer,d=this.state.quizQAs,v=f(l,d),y=d.length/10;if(n=React.createElement(X,{quiz:u,mode:l,score:v,completePercent:y,dispatch:this.dispatch}),r=React.createElement($,{show:"review"===o,question:m}),"prompt"===o)a=React.createElement(le,{question:m}),c=React.createElement(re,{mode:l,quiz:u,question:m,dispatch:this.dispatch});else if("review"===o){var E=h(l,d);a=React.createElement(ue,{question:m}),c=React.createElement(ae,{mode:l,question:m,answer:p,dispatch:this.dispatch,gameOver:E})}else if("score"===o){var b=i[l][u],R=i.latest;a=React.createElement(me,{quizHistory:b,latest:R}),c=React.createElement(ce,{quiz:u,dispatch:this.dispatch})}}return React.createElement("div",{className:"app"},n,r,a,c)}}]),t}();function J(e){var t=e.children;return React.createElement("div",{className:"header"},t)}function X(e){var t=e.quiz,n=(e.mode,e.score),r=e.completePercent,a=e.dispatch;return React.createElement(J,null,React.createElement("h2",{className:"header__quiz-name",onClick:function(){return a({type:"SELECT_QUIZ",quiz:null})}},E(t)),React.createElement("h2",{className:"header__score"},n),React.createElement(Y,{completePercent:r}))}function G(){return React.createElement(J,null,React.createElement("h1",{className:"header__home"},"HardBibleQuiz",React.createElement("span",{className:"text-muted"},".com")))}function Y(e){var t=e.completePercent;return React.createElement("div",{className:"header__progress-bar",style:{width:100*t+"%"}})}function $(e){var t=e.show,n=e.question,r=t?"answer-panel answer-panel--show":"answer-panel",a=t?S(n):"";return React.createElement("div",{className:r},a)}function ee(e){var t=e.children;return React.createElement("div",{className:"footer"},t)}function te(){return React.createElement(ee,null)}function ne(e){var t=e.children;return React.createElement("a",{href:"mailto:artsandmetaphysics@gmail.com"},t)}var re=function(e){function t(e){var n;return I(this,t),(n=L(this,U(t).call(this,e))).state={partialAnswer:[]},n.back=n.back.bind(V(n)),n.choose=n.choose.bind(V(n)),n.getChoices=n.getChoices.bind(V(n)),n}return W(t,React.Component),D(t,[{key:"choose",value:function(e){var t=this.props,n=t.mode,r=t.dispatch,a={basic:1,moses:2,jesus:3}[n],c=[].concat(H(this.state.partialAnswer),[e]);c.length===a?r({type:"ANSWER",answer:c}):this.setState({partialAnswer:c})}},{key:"back",value:function(){this.setState(function(e){var t=e.partialAnswer.slice();return t.pop(),console.log({partialAnswer:t}),{partialAnswer:t}})}},{key:"getChoices",value:function(){var e=this.props.quiz,t=M(this.state.partialAnswer,2),n=t[0],r=t[1],c=function(e){return{value:e,label:String(e+1)}};return void 0!==r?a(C(n,r)).map(c):void 0!==n?a(k(n)).map(c):b(e).map(function(e){return{value:e,label:T(e)}})}},{key:"render",value:function(){var e=this.props,t=(e.mode,e.quiz,e.question,e.dispatch,this.state.partialAnswer.length>0),n=this.getChoices(),r=this.choose;return React.createElement(ee,null,React.createElement(se,null,"Which book is this",React.createElement("span",{className:"text-highlight"}," random verse "),"found in?"),React.createElement(oe,null,n.map(function(e){return React.createElement(ye,{key:e.value,onClick:function(){return r(e.value)}},e.label)}),t?React.createElement(ye,{state:"secondary",onClick:this.back},"Back"):null))}}]),t}();function ae(e){var t,n,r=e.mode,a=e.question,c=e.answer,o=e.gameOver,s=e.dispatch,i=v(r,[a,c]),l=d(r,[a,c]),u={correct:"success",close:"secondary",incorrect:"error"}[i],m=o?"Continue":"Next Verse";return"correct"===i?t=React.createElement("span",{className:"text-success"},"CORRECT! +",l):"close"===i?(n=S(c),t=React.createElement("span",{className:"text-muted"},"Close, you selected ",React.createElement("span",{className:"text-highlight"},n)," +",l)):"incorrect"===i&&(n=S(c),t=React.createElement("span",{className:"text-error"},"Not quite, you selected ",React.createElement("span",{className:"text-highlight"},n))),React.createElement(ee,null,React.createElement(se,null,t),React.createElement(oe,null,React.createElement(ye,{state:u,onClick:function(){return s({type:"NEXT"})}},m)))}function ce(e){var t=e.quiz,n=e.dispatch;return React.createElement(ee,null,React.createElement(se,null,"Thank you for playing!"),React.createElement(oe,null,React.createElement(ye,{state:"secondary",onClick:function(){return n({type:"SELECT_QUIZ",quiz:null})}},"Switch Quiz"),React.createElement(ye,{onClick:function(){return n({type:"SELECT_QUIZ",quiz:t})}},"Play Again")))}function oe(e){var t=e.children;return React.createElement("div",{className:"footer__btn-set"},t)}function se(e){var t=e.children;return React.createElement("p",{className:"footer__prompt text-muted"},t)}function ie(e){var t=e.children;return e.paddingTop?React.createElement("div",{className:"body body--padding-top"},t):React.createElement("div",{className:"body"},t)}function le(e){var t=e.question;return React.createElement(ie,null,React.createElement(Ee,{verse:t,context:1,showNumbers:!1}))}function ue(e){var t=e.question;return React.createElement(ie,{paddingTop:!0},React.createElement(Ee,{verse:t,context:1e4,showNumbers:!0}))}function me(e){var t=e.quizHistory,n=e.latest;return React.createElement("div",{className:"body"},React.createElement("table",null,React.createElement("thead",null,React.createElement("tr",null,React.createElement("th",null),React.createElement("th",null,"Score"),React.createElement("th",null,"Date"))),React.createElement("tbody",null,t.map(function(e,r){var a;e[1]===n[1]?a={color:1===t.length?"#341F89":r===t.length-1?"#EB5757":"#28891F"}:a={};return React.createElement("tr",{key:r,style:a},React.createElement("td",null,r+1),React.createElement("td",{style:{textAlign:"right"}},e[0]),React.createElement("td",null,e[1]))}))))}function pe(){return React.createElement(ie,null,React.createElement("h2",{className:"text-error"},"Application Error"),React.createElement("p",{className:"text-muted"},"We apologize, but something unexpected occured.  Try refreshing the page.  If the error continues to occur, please ",React.createElement(ne,null,"let us know"),"."))}function he(e){var t=e.gameHistory,n=e.mode,r=e.dispatch,a=function(e){var a=e.quiz;return React.createElement(fe,{gameHistory:t,mode:n,quiz:a,dispatch:r})};return React.createElement(ie,null,React.createElement("p",{className:"text-muted"},"A fun and challenging way to read the Bible."),React.createElement("div",{className:"body__quiz-set"},React.createElement(a,{quiz:"pentateuch"}),React.createElement(a,{quiz:"historical"}),React.createElement(a,{quiz:"poetryandwisdom"}),React.createElement(a,{quiz:"prophecy"}),React.createElement(a,{quiz:"oldtestament"})),React.createElement("div",{className:"body__quiz-set"},React.createElement(a,{quiz:"gospels"}),React.createElement(a,{quiz:"epistlesetc"}),React.createElement(a,{quiz:"newtestament"})),React.createElement("div",{className:"body__quiz-set"},React.createElement(ve,{gameHistory:t,mode:n,dispatch:r})))}function fe(e){var t=e.gameHistory,n=e.mode,r=e.quiz,a=e.dispatch,c=w(t,n,r),o=c&&c[0]!==c[1],s=o?function(){}:function(){return a({type:"SELECT_QUIZ",quiz:r})},i=A(t,n,r),l=o?"disabled":i?"success":"primary",u=t[n][r],m=void 0!==u?u[0][0]:null;return React.createElement(ye,{onClick:s,state:l},React.createElement("span",{className:"vertical-center"},React.createElement("span",{className:"top-score"},o?React.createElement(de,null):m),React.createElement("h2",null,E(r))),o?React.createElement("span",null,c[0]+"/"+c[1]):React.createElement("span",null))}function de(){return React.createElement("svg",{width:"11",height:"17",viewBox:"0 0 11 17",fill:"none",xmlns:"http://www.w3.org/2000/svg"},React.createElement("path",{d:"M2.5 7.63416V3.73172C2.5 0.089432 8.5 0.0894241 8.5 3.73172V7.63416",stroke:"white","stroke-width":"2"}),React.createElement("path",{d:"M0 8.11383C0 7.56155 0.447715 7.11383 1 7.11383H10C10.5523 7.11383 11 7.56155 11 8.11383V16C11 16.5523 10.5523 17 10 17H1C0.447715 17 0 16.5523 0 16V8.11383Z",fill:"white"}))}function ve(e){var t,n,r=e.gameHistory,a=e.mode,c=e.dispatch;A(r,"moses","oldtestament")&&A(r,"moses","newtestament")?(t={basic:"moses",moses:"jesus",jesus:"basic"}[a],n={basic:"Moses Mode",moses:"Jesus Mode",jesus:"Basic Mode"}[a]):(t={basic:"moses",moses:"basic"}[a],n={basic:"Moses Mode",moses:"Basic Mode"}[a]);return React.createElement(ye,{onClick:function(){return c({type:"SELECT_MODE",mode:t})},state:"primary"},React.createElement("span",{className:"vertical-centerr"},React.createElement("span",{className:"top-score"}),React.createElement("h2",null,n)))}function ye(e){var t=e.children,n=e.onClick,r=void 0===n?function(){}:n,a=e.state,c=void 0===a?"primary":a;return React.createElement("div",{className:"btn btn--"+c,onClick:r},t)}var Ee=function(e){function t(e){return I(this,t),L(this,U(t).call(this,e))}return W(t,React.Component),D(t,[{key:"componentDidMount",value:function(){this.scrollToVerse()}},{key:"componentDidUpdate",value:function(){this.scrollToVerse()}},{key:"scrollToVerse",value:function(){var e=Math.max(document.documentElement.clientHeight,window.innerHeight||0),t=document.getElementById("current-verse"),n=document.getElementsByClassName("body")[0],r=t.offsetTop-e/2+30;document.body.scrollTop=r,n.scrollTop=r}},{key:"render",value:function(){for(var e=this.props,t=e.verse,n=e.context,r=e.showNumbers,a=[],c=[],o=t,s=0;s<n&&null!==(o=j(o));s++)a.unshift(O(o,r));o=t;for(var i=0;i<n&&null!==(o=Q(o));i++)c.push(O(o,r));var l=O(t,r);return React.createElement("p",{className:"body__verses"},React.createElement("span",{className:"text-muted"},be(a.join(" "))),React.createElement("span",{id:"current-verse",className:"text-main"}," ",be(l)," "),React.createElement("span",{className:"text-muted"},be(c.join(" "))))}}]),t}();function be(e){var t=e.split("\n");return t.map(function(e,n){if(e.startsWith("CHAPTER "))return React.createElement("span",{key:n,className:"chapter"},e);if(""===e)return null;var r=n!==t.length-1;return React.createElement("span",{key:n},c(e),r?React.createElement("br",null):null)})}ReactDOM.render(React.createElement(K,null),document.getElementById("app"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,